# Bars are defined as an array, so you can have more than one
[[bar]]
#You can view the name/make/model/description for your monitors by running RUST_LOG=info rwaybar
name = "DP-2"
size = 25
side = "top"
left = ["workspaces", "break-enforcer"]
center= ["clock"]
right = ["co2", "pm2_5", "temperature", "humidity", "anki", "tray"]
font = "Roboto 14"
fg = "white"
bg = "black"
bg-alpha = 0.1
tooltips = { bg = "gray" }

[fonts]
# Named fonts are tried first, then all other fonts are searched for missing glyphs
mono = "/usr/share/fonts/truetype/roboto/hinted/Roboto-Medium.ttf"

[time_fmt]
# type='value' is implied if the only key is 'value'
# Value is not format-expanded, but its contents can be set by actions (see clock below)
value = "%Y-%m-%d %H:%M"

[time]
type = "clock"
format = "{time_fmt}"

[tray]
type = "tray"

[clock]
type = "text"
format = "{time}"
# The expression "{bar.some-value}" reads configuration items from the
# currently rendering bar, which is useful if you want to have bars of
# different sizes without duplicating all your items just to change one value
font = "{bar.the-clock-font}"
margin = "0 10"

[volume]
type = "pipewire"
source = { type = 'pipewire', target = 'default.audio.sink' }
margin = "0 10"

[break-enforcer-cmd]
type = "exec-json"
command = "/usr/bin/break-enforcer status -j -u 1s"
# This script outputs lines like '{"msg": "break in 5m"}'

[break-enforcer]
format = "{break-enforcer-cmd.msg}"
margin = "0 10"

[reading-cmd]
type = "exec-json"
command = "ha-text-widget --server 192.168.1.43:1235 --json lb-pm2 lb-temp lb-hum lb-co2"

[temperature]
format = "{reading-cmd.lb-temp:.2}{reading-cmd.lb-temp-unit}"
margin = "0 10"

[humidity]
format = "{reading-cmd.lb-hum:.2}{reading-cmd.lb-hum-unit}"
margin = "0 10"

[pm2_5]
format = "{reading-cmd.lb-pm2:.1}{reading-cmd.lb-pm2-unit}"
margin = "0 10"

[co2]
format = "{reading-cmd.lb-co2}{reading-cmd.lb-co2-unit}"
margin = "0 10"

[anki-cmd]
type = "exec-json"
command = "anki-widget --json --path /home/david/.var/app/net.ankiweb.Anki/data/Anki2 continuous"

[anki]
format = "{anki-cmd.due}/{anki-cmd.new}"
margin = "0 10"

## WORKSPACE
[sway-workspace]
type = "sway-workspace"

[workspaces]
type = "focus-list"
source = "sway-workspace"

# Instead of writing "workspaces.item = 'an_item'", we can use a sub-key like this:
# (note you can't address such sub-keys from other items)
[workspaces.item]
format = " {item} "
margin = "0 1 0 1"
padding = "0 0 5 0"
border = "3 0 0 0"
border-alpha = 0

[workspaces.focused-item]
format = " {item} "
margin = "0 1 0 1"
padding = "0 0 5 0"
border = "3 0 0 0"
bg = "#197d9b"
bg-alpha = 0.8

[workspaces-repr]
type = "sway-tree"
align = "center"
margin = "2 0 6 0"
markup = true

[workspaces-repr.pre-node]
format = "{item.layout}["

[[workspaces-repr.window]]
format = '{item.marks}'

[[workspaces-repr.window]]
type = 'icon'
name = '{item-icon-path}'
fallback = '({item.appid})'
tooltip = '{item.title}'
border = "0 0 2 0"
padding = "2 0"
border-color = "#69cbad"
border-alpha = '{item.focus}'

[workspaces-repr.post-node]
format = "]"

[workspaces-repr.pre-float]
format = " + "
